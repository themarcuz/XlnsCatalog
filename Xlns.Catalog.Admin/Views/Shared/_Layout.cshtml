@using Xlns.Catalog.Admin.Models;

<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <title>INSPINIA | @ViewBag.Title</title>

    <link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,600,700' rel='stylesheet' type='text/css'>
    <!-- Add local styles, mostly for plugins css file -->
    @if (IsSectionDefined("Styles"))
    {@RenderSection("Styles", required: false)}

    <!-- Add jQuery Style direct - used for jQGrid plugin -->
    <link href="@Url.Content("~/Scripts/plugins/jquery-ui/jquery-ui.css")" rel="stylesheet" type="text/css" />

    <!-- Primary Inspinia style -->
    @Styles.Render("~/Content/css")
    @Styles.Render("~/font-awesome/css")
    @Styles.Render("~/plugins/toastrStyles")

    <!-- Section for main scripts render -->
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @Scripts.Render("~/plugins/slimScroll")
    @Scripts.Render("~/bundles/inspinia")

</head>
<body>

    <!-- Skin configuration box -->
    <!-- @Html.Partial("_SkinConfig") -->

    <!-- Wrapper-->
    <!-- PageClass give you ability to specify custom style for specific view based on action -->
    <div id="wrapper" class="@Html.PageClass()">

        <!-- Navigation -->
        @Html.Partial("_Navigation")

        <!-- Page wraper -->
        <div id="page-wrapper" class="gray-bg @ViewBag.SpecialClass">

            <!-- Top Navbar -->
            @Html.Partial("_TopNavbar")

            <!-- Main view  -->
            @RenderBody()

            <!-- Footer -->
            @Html.Partial("_Footer")

        </div>
        <!-- End page wrapper-->

        <!-- Right Sidebar -->
        @Html.Partial("_RightSidebar")

    </div>
    <!-- End wrapper-->


    @Scripts.Render("~/plugins/toastr")
    <script type="text/javascript">
        $(document).ready(function () {
            toastr.options = {
                //toastClass: 'alert',
                //iconClasses: {
                //    error: 'alert-error',
                //    info: 'alert-info',
                //    success: 'alert-success',
                //    warning: 'alert-warning'
                //},
                closeButton: true,
                debug: true,
                progressBar: false,
                positionClass: "toast-top-right",
                preventDuplicates: true,
                onclick: null,
                showDuration: "400",
                hideDuration: "1000",
                timeOut: "5000",
                extendedTimeOut: "1000",
                showEasing: "swing",
                hideEasing: "linear",
                showMethod: "fadeIn",
                hideMethod: "fadeOut"
            }
            @if (TempData.ContainsKey("notification"))
            {
                <text>
                toastr["@((TempData["notification"] as Notification).Type)"]('@((TempData["notification"] as Notification).Message)', '@((TempData["notification"] as Notification).Title)');
                </text>
            }



        });

    </script>

    <!-- Handler for local scripts -->
    @RenderSection("scripts", required: false)
</body>
</html>
